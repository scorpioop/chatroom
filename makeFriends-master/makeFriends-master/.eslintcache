[{"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\index.js":"1","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\store.js":"2","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\test\\socketIO_test.js":"3","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\login\\login.jsx":"4","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\register\\register.jsx":"5","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\main\\main.jsx":"6","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\reducers.js":"7","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\actions.js":"8","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\utils\\index.js":"9","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\personal\\personal.jsx":"10","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv\\meinv.jsx":"11","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige\\shuaige.jsx":"12","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige_info\\shuaige_info.jsx":"13","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv_info\\meinv_info.jsx":"14","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\message\\message.jsx":"15","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\search\\search.jsx":"16","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\chat\\chat.jsx":"17","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\not-found\\not-found.jsx":"18","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\logo\\logo.jsx":"19","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\nav-footer\\nav-footer.jsx":"20","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\action-types.js":"21","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\api\\index.js":"22","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\user-list\\user-list.jsx":"23","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\header-selector\\header-selector.jsx":"24","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\api\\ajax.js":"25","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\index.js":"26","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\store.js":"27","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\test\\socketIO_test.js":"28","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\register\\register.jsx":"29","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\login\\login.jsx":"30","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\main\\main.jsx":"31","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\reducers.js":"32","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\actions.js":"33","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\utils\\index.js":"34","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige_info\\shuaige_info.jsx":"35","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige\\shuaige.jsx":"36","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\personal\\personal.jsx":"37","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv_info\\meinv_info.jsx":"38","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\message\\message.jsx":"39","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv\\meinv.jsx":"40","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\chat\\chat.jsx":"41","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\search\\search.jsx":"42","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\not-found\\not-found.jsx":"43","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\logo\\logo.jsx":"44","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\nav-footer\\nav-footer.jsx":"45","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\action-types.js":"46","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\api\\index.js":"47","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\header-selector\\header-selector.jsx":"48","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\user-list\\user-list.jsx":"49","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\api\\ajax.js":"50"},{"size":755,"mtime":1610369012000,"results":"51","hashOfConfig":"52"},{"size":338,"mtime":1610369012000,"results":"53","hashOfConfig":"52"},{"size":276,"mtime":1610369012000,"results":"54","hashOfConfig":"52"},{"size":1904,"mtime":1610369012000,"results":"55","hashOfConfig":"52"},{"size":3025,"mtime":1610369012000,"results":"56","hashOfConfig":"52"},{"size":5407,"mtime":1610369012000,"results":"57","hashOfConfig":"52"},{"size":2546,"mtime":1610369012000,"results":"58","hashOfConfig":"52"},{"size":5889,"mtime":1662621560798,"results":"59","hashOfConfig":"52"},{"size":497,"mtime":1610369012000,"results":"60","hashOfConfig":"52"},{"size":1722,"mtime":1610369012000,"results":"61","hashOfConfig":"52"},{"size":609,"mtime":1610369012000,"results":"62","hashOfConfig":"52"},{"size":688,"mtime":1610369012000,"results":"63","hashOfConfig":"52"},{"size":1979,"mtime":1610369012000,"results":"64","hashOfConfig":"52"},{"size":1992,"mtime":1610369012000,"results":"65","hashOfConfig":"52"},{"size":3518,"mtime":1610369012000,"results":"66","hashOfConfig":"52"},{"size":1916,"mtime":1610369012000,"results":"67","hashOfConfig":"52"},{"size":5724,"mtime":1610369012000,"results":"68","hashOfConfig":"52"},{"size":478,"mtime":1610369012000,"results":"69","hashOfConfig":"52"},{"size":350,"mtime":1610369012000,"results":"70","hashOfConfig":"52"},{"size":1525,"mtime":1610369012000,"results":"71","hashOfConfig":"52"},{"size":621,"mtime":1610369012000,"results":"72","hashOfConfig":"52"},{"size":834,"mtime":1610369012000,"results":"73","hashOfConfig":"52"},{"size":1798,"mtime":1610369012000,"results":"74","hashOfConfig":"52"},{"size":1027,"mtime":1610369012000,"results":"75","hashOfConfig":"52"},{"size":655,"mtime":1610369012000,"results":"76","hashOfConfig":"52"},{"size":779,"mtime":1662631967014,"results":"77","hashOfConfig":"78"},{"size":350,"mtime":1662631967015,"results":"79","hashOfConfig":"78"},{"size":283,"mtime":1662631967016,"results":"80","hashOfConfig":"78"},{"size":3139,"mtime":1662631967012,"results":"81","hashOfConfig":"78"},{"size":1975,"mtime":1662631967010,"results":"82","hashOfConfig":"78"},{"size":5566,"mtime":1662631967010,"results":"83","hashOfConfig":"78"},{"size":2633,"mtime":1662631967015,"results":"84","hashOfConfig":"78"},{"size":6046,"mtime":1662711106798,"results":"85","hashOfConfig":"78"},{"size":523,"mtime":1662631967016,"results":"86","hashOfConfig":"78"},{"size":2057,"mtime":1662631967013,"results":"87","hashOfConfig":"78"},{"size":718,"mtime":1662631967013,"results":"88","hashOfConfig":"78"},{"size":1781,"mtime":1662631967012,"results":"89","hashOfConfig":"78"},{"size":2069,"mtime":1662631967011,"results":"90","hashOfConfig":"78"},{"size":3623,"mtime":1662631967011,"results":"91","hashOfConfig":"78"},{"size":631,"mtime":1662631967010,"results":"92","hashOfConfig":"78"},{"size":5926,"mtime":1662631967009,"results":"93","hashOfConfig":"78"},{"size":1995,"mtime":1662631967012,"results":"94","hashOfConfig":"78"},{"size":500,"mtime":1662631967008,"results":"95","hashOfConfig":"78"},{"size":369,"mtime":1662631967005,"results":"96","hashOfConfig":"78"},{"size":1575,"mtime":1662631967008,"results":"97","hashOfConfig":"78"},{"size":631,"mtime":1662631967014,"results":"98","hashOfConfig":"78"},{"size":858,"mtime":1662631966995,"results":"99","hashOfConfig":"78"},{"size":1070,"mtime":1662631967002,"results":"100","hashOfConfig":"78"},{"size":1856,"mtime":1662631967009,"results":"101","hashOfConfig":"78"},{"size":678,"mtime":1662631966994,"results":"102","hashOfConfig":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"4j0gv8",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"105"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"105"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"105"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"105"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"105"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"105"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"105"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"105"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"105"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"105"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"syjln2",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"166"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"166"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"166"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"166"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"166"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"166"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"166"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"166"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"166"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"166"},"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\index.js",[],["225","226"],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\store.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\test\\socketIO_test.js",["227"],"//连接服务器,得到代表连接的socket对象\nimport io from 'socket.io-client'\n\n\n// //向服务器发送消息\n// socket.emit('sendMsg', { name: 'zhenni', date: Date.now() })\n// console.log('浏览器端向服务器发送消息:', { name: 'zhenni', date: Date.now() })\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\login\\login.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\register\\register.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\main\\main.jsx",["228","229"],"// 注册主界面m组件\nimport React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { NavBar, Icon } from 'antd-mobile'\nimport ShuaiGeInfo from '../shuaige_info/shuaige_info'\nimport MeiNvInfo from '../meinv_info/meinv_info'\nimport MeiNv from '../meinv/meinv'\nimport ShuaiGe from '../shuaige/shuaige'\nimport Message from '../message/message'\nimport Personal from '../personal/personal'\nimport NotFound from '../../components/not-found/not-found'\nimport NavFooter from '../../components/nav-footer/nav-footer'\nimport Chat from '../chat/chat'\nimport Search from '../search/search'\nimport Cookies from 'js-cookie' // 可以操作前端cookie的对象set()/get()/remove()\nimport { setPath } from '../../utils/index'\nimport { getUser } from '../../redux/actions'\n\nclass Main extends Component {\n  constructor () {\n    super()\n    this.state = {}\n  }\n  // 给组件对象添加属性\n  navList = [\n    //包含所有导航组件的相关属性信息\n    {\n      path: '/shuaige', // 路由路径\n      component: ShuaiGe,\n      title: '美女列表',\n      icon: 'meinv',\n      text: '美女'\n    },\n    {\n      path: '/meinv', // 路由路径\n      component: MeiNv,\n      title: '帅哥列表',\n      icon: 'shuaige',\n      text: '帅哥'\n    },\n    {\n      path: '/message', // 路由路径\n      component: Message,\n      title: '消息列表',\n      icon: 'message',\n      text: '消息'\n    },\n    {\n      path: '/personal', // 路由路径\n      component: Personal,\n      title: '用户中心',\n      icon: 'personal',\n      text: '个人'\n    }\n  ]\n  // 生命周期函数\n  componentDidMount () {\n    // 曾经登录过（cookie中有userId），但是现在还没登录（reducer中有userId的数据），如果cookie中有userId，发送请求获取对应的user\n    const userId = Cookies.get('userId')\n\n    if (userId && !this.props.user._id) {\n      // 发送异步请求，获取user\n      this.props.getUser()\n    }\n  }\n  render () {\n    /**\n     * 实现自动登录的条件\n     * 1、componentDidMount：曾经登录过（cookie中有userId），但是现在还没登录（reducer中有userId的数据），如果cookie中有userId，发送请求获取对应的user\n     * 2、render ：如果cookie中没有userid，跳转到登录页面\n     * 2.1判断redux管理的user中是否有_id,如果没有，暂时不做处理\n     * 2.2如果有_id 说明当前已经登录，显示对应的界面\n     * 3、如果已经登录，如果请求的时根目录\n     * 根据user的type和header来计算出一个重定向的路由路径，并自动重定向\n     *\n     */\n    //  路由跳转情况1：没有userId，直接跳转到login页面\n    const userId = Cookies.get('userId')\n    const { unReadCount } = this.props\n    if (!userId) {\n      return <Redirect to={'/login'} />\n    }\n    // 路由跳转情况2：如果没有_id通过生命周期函数去请求用户信息获取用户信息实现自登陆\n    // 如果有_id进根据url的地址进行跳转\n    if (!this.props.user._id) {\n      return null\n    } else {\n      let path = this.props.location.pathname\n      if (path == '/')\n        path = setPath(this.props.user.type, this.props.user.header)\n\n      const { navList } = this\n      const routePath = this.props.location.pathname\n      const currentNav = navList.find(nav => nav.path === routePath) //得到当前的nav，可能没有\n      // 处理底部导航的显示和隐藏\n      if (currentNav) {\n        if (this.props.user.type == 'meinv') {\n          this.navList[0].hide = true\n        } else {\n          this.navList[1].hide = true\n        }\n      }\n      return (\n        <div>\n          {currentNav ? (\n            currentNav.path === '/personal' ? (\n              <NavBar\n                className='sticky-header'\n                rightContent={[<Icon key='1' type='ellipsis' />]}\n              >\n                {currentNav.title}\n              </NavBar>\n            ) : (\n              <NavBar\n                className='sticky-header'\n                rightContent={[\n                  <Icon\n                    key='0'\n                    type='search'\n                    style={{ marginRight: '16px' }}\n                    onClick={()=>this.props.history.push(`/search`)}\n                  />,\n                  <Icon key='1' type='ellipsis' />\n                ]}\n              >\n                {currentNav.title}\n              </NavBar>\n            )\n          ) : null}\n\n          <Switch>\n            {navList.map(nav => (\n              <Route\n                path={nav.path}\n                component={nav.component}\n                key={nav.path}\n              ></Route>\n            ))}\n            <Route path='/shuaigeinfo' component={ShuaiGeInfo}></Route>\n            <Route path='/meinvinfo' component={MeiNvInfo}></Route>\n            <Route path='/search' component={Search}></Route>\n            <Route path='/chat/:userId' component={Chat}></Route>\n            <Route path='/notfound' component={NotFound}></Route>\n            <Redirect to={path} />\n          </Switch>\n          {currentNav ? (\n            <NavFooter navList={navList} unReadCount={unReadCount}></NavFooter>\n          ) : null}\n        </div>\n      )\n    }\n  }\n}\n\nexport default connect(\n  state => ({ user: state.user, unReadCount: state.chatMsgList.unReadCount }),\n  { getUser }\n)(Main)\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\reducers.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\actions.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\utils\\index.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\personal\\personal.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv\\meinv.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige\\shuaige.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige_info\\shuaige_info.jsx",["230"],"// 帅哥信息完善的路由容器组件\nimport React, { Component } from 'react'\nimport {Redirect} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\nimport HeaderSelector from '../../components/header-selector/header-selector'\nimport { updateUser } from '../../redux/actions'\n\nclass ShuaiGeInfo extends Component {\n  constructor () {\n    super()\n    this.state = {\n      header: '',\n      age: '',\n      xueii: '',\n      money: '',\n      detail: ''\n    }\n  }\n\n  render () {\n    const {header,type}=this.props\n    if (header) {\n      const path =type=='meinv'?'/meinv':'/shuaige'\n      return <Redirect to={path}/>\n    }\n    return (\n      <div>\n        <NavBar>帅哥信息完善</NavBar>\n        <HeaderSelector setHandleHeader={this.setHandleHeader}></HeaderSelector>\n        <InputItem\n          placeholder='输入年龄'\n          onChange={val => this.handleChange('age', val)}\n        >\n          年龄 ：\n        </InputItem>\n        <InputItem\n          placeholder='输入学历'\n          onChange={val => this.handleChange('xueii', val)}\n        >\n          学历 ：\n        </InputItem>\n        <InputItem\n          placeholder='输入薪资'\n          onChange={val => this.handleChange('money', val)}\n        >\n          薪资 ：\n        </InputItem>\n        <TextareaItem\n          title='交友宣言 ：'\n          rows={3}\n          clear\n          count={200}\n          onChange={val => this.handleChange('detail', val)}\n        ></TextareaItem>\n        <Button type='primary' onClick={this.save}>\n          保存\n        </Button>\n      </div>\n    )\n  }\n  handleChange = (name, val) => {\n    this.setState({\n      [name]: val\n    })\n  }\n  // 更新header\n  setHandleHeader = header => {\n    this.setState({\n      header\n    })\n  }\n  save = () => {\n    this.props.updateUser(this.state)\n  }\n}\n\nexport default connect(state => state.user, { updateUser })(ShuaiGeInfo)\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv_info\\meinv_info.jsx",["231"],"// 帅哥信息完善的路由容器组件\nimport React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\nimport HeaderSelector from '../../components/header-selector/header-selector'\nimport { updateUser } from '../../redux/actions'\n\nclass MeiNvInfo extends Component {\n  constructor () {\n    super()\n    this.state = {\n      header: '',\n      waimao: '',\n      xueii: '',\n      money: '',\n      detail: ''\n    }\n  }\n  render () {\n    const { header, type } = this.props\n    if (header) {\n      const path = type == 'meinv' ? '/meinv' : '/shuaige'\n      return <Redirect to={path} />\n    }\n    return (\n      <div>\n        <NavBar>美女信息完善</NavBar>\n        <HeaderSelector setHandleHeader={this.setHandleHeader}></HeaderSelector>\n        <InputItem\n          placeholder='输入美貌'\n          onChange={val => this.handleChange('waimao', val)}\n        >\n          美貌 ：\n        </InputItem>\n        <InputItem\n          placeholder='输入学历'\n          onChange={val => this.handleChange('xueii', val)}\n        >\n          学历 ：\n        </InputItem>\n        <InputItem\n          placeholder='输入薪资'\n          onChange={val => this.handleChange('money', val)}\n        >\n          薪资 ：\n        </InputItem>\n        <TextareaItem\n          title='交友宣言 ：'\n          rows={3}\n          clear\n          count={200}\n          onChange={val => this.handleChange('detail', val)}\n        ></TextareaItem>\n        <Button type='primary' onClick={this.save}>\n          保存\n        </Button>\n      </div>\n    )\n  }\n  handleChange = (name, val) => {\n    this.setState({\n      [name]: val\n    })\n  }\n  // 更新header\n  setHandleHeader = header => {\n    this.setState({\n      header\n    })\n  }\n  save = () => {\n    this.props.updateUser(this.state)\n  }\n}\n\nexport default connect(state => state.user,{updateUser})(MeiNvInfo)\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\message\\message.jsx",["232"],"/**\n * 消息主界面路由容器组件\n */\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Moment from 'moment'\nimport { List, Badge } from 'antd-mobile'\nconst Item = List.Item\n\n// 对chatMsgs根据chat_id进行分组，并得到每个组的lastmsg组成的数组\n/**\n * 1、找出每个聊天的lastMsg，并用一个对象勇气来保存{chat_id:lastMsg}\n * 2、得到所有lastMsg的数组\n * 3、对数组进行排序（按create_time降序)\n * @param {*} chatMsgs\n */\nfunction getLastMsgs (chatMsgs, userId) {\n  const lastMsgObjs = {}\n  chatMsgs.forEach(msg => {\n    // 对msg进行个体统计  (别人发给我的，而且还说我没有读的消息)\n    if (msg.to === userId && !msg.read) {\n      msg.unReadCount = 1\n    } else {\n      msg.unReadCount = 0\n    }\n    const chatId = msg.chat_id\n    const lastMsg = lastMsgObjs[chatId]\n    if (!lastMsg) {\n      //当前msg就是所在组的lastMsg\n      lastMsgObjs[chatId] = msg\n    } else {\n      // 累加UnReadCount=已经统计的+当前msg的\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount\n      //如果msg比lastMsg晚，就将msg保存为lastMsg\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObjs[chatId] = msg\n      }\n      // 将UnReadCount保存最新的lastMsg上\n      lastMsgObjs[chatId].unReadCount = unReadCount\n    }\n  })\n  // 得到所有的lastMsg组成的数组\n  const lastMsgs = Object.values(lastMsgObjs)\n  // 对数组进行排序（按照create_time）\n  lastMsgs.sort(function (m1, m2) {\n    //如果结果小于0，将m1放在前面，如果结果为0，保持不变，如果大于0，m2放在前面\n    return m1.create_time - m2.create_time\n  })\n\n  return lastMsgs\n}\nclass Message extends Component {\n  render () {\n    const { user } = this.props\n    const { users, chatMsgs } = this.props.chat\n\n    // 对chatMsgs根据chat_id进行分组\n    const lastLists = getLastMsgs(chatMsgs, user._id) //不加this的函数调用，函数需要定义到class外面，如果加this调用函数，函数需要定义到class里面\n    return (\n      <List\n        style={{ marginTop: 50, marginBottom: 50 }}\n        className='messageStyle'\n      >\n        {lastLists.map(msg => {\n          // 得到目标用户的id\n          const fromTime = Moment(msg.create_time).format('HH:mm')\n          const targetUserId = msg.to === user._id ? msg.from : msg.to\n          // 得到目标用户的信息\n          const targetUser = users[targetUserId]\n          if (msg.unReadCount > 99) {\n            msg.unReadCount = 99 + '+'\n          }\n          return (\n            <Item\n              extra={fromTime}\n              arrow='horizontal'\n              key={msg._id}\n              onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\n            >\n              <Badge text={msg.unReadCount}>\n                <img\n                  src={\n                    targetUser.header\n                      ? require(`../../assets/images/${targetUser.header}.png`)\n                          .default\n                      : null\n                  }\n                />\n              </Badge>\n              <span style={{ marginLeft: 20 ,width:'80%'}} className='userNameAndContent'>\n                <div>{targetUser.username}</div>\n                <div>{msg.content}</div>\n              </span>\n            </Item>\n          )\n        })}\n      </List>\n    )\n  }\n}\n\nexport default connect(\n  state => ({ user: state.user, chat: state.chatMsgList }),\n  {}\n)(Message)\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\search\\search.jsx",["233"],"import React, { Component } from 'react'\nimport {\n  NavBar,\n  Button,\n  SearchBar,\n  WhiteSpace,\n  List,\n  Checkbox,\n  Icon\n} from 'antd-mobile'\nimport {connect} from 'react-redux'\nimport {getXueLiPeo} from '../../redux/actions'\n\nconst CheckboxItem = Checkbox.CheckboxItem\nclass Search extends React.Component {\n  state = {\n    xueliArrays: []\n  }\n  onChange = val => {\n    this.setState(\n      {\n        xueliArrays: [...this.state.xueliArrays, val]\n      },\n      function () {\n        // console.log(this.state.xueliArrays)\n      }\n    )\n  }\n  render () {\n    const data = [\n      { xueii: '初中' },\n      { xueii: '高中' },\n      { xueii: '专科' },\n      { xueii: '本科' },\n      { xueii: '大学士' },\n      { xueii: '太子伴读' },\n      { xueii: '硕士' },\n      { xueii: '博士' },\n      { xueii: '博士后' }\n    ]\n    return (\n      <div>\n        <NavBar\n          icon={<Icon type='left'></Icon>}\n          className='sticky-header'\n          onLeftClick={() => this.props.history.goBack()}\n        >\n          搜索\n        </NavBar>\n\n        <SearchBar\n          style={{ marginTop: 50 }}\n          placeholder='搜索'\n          ref={ref => (this.autoFocusInst = ref)}\n        />\n        <WhiteSpace />\n\n        <h3>按条件搜索</h3>\n        <WhiteSpace />\n        <List renderHeader={() => '学历'}>\n          {data.map(i => (\n            <CheckboxItem key={i.xueii} onChange={() => this.onChange(i)}>\n              {i.xueii}\n            </CheckboxItem>\n          ))}\n        </List>\n        <WhiteSpace />\n        <Button onClick={()=>this.searthRes()}>搜索</Button>\n        <WhiteSpace />\n      </div>\n    )\n  }\n  searthRes=()=>{\n    let {type}=this.props.user\n    type=type==='shuaige'?'meinv':'shuaige'\n    this.props.getXueLiPeo({type,xueliArrays:this.state.xueliArrays})\n  }\n}\n\nexport default connect(state=>({user:state.user,userList:state.userlist}),{getXueLiPeo})(Search)","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\containers\\chat\\chat.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\not-found\\not-found.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\logo\\logo.jsx",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\nav-footer\\nav-footer.jsx",["234","235"],"/**\n * 底部导航列表\n */\nimport React, { Component } from 'react'\nimport { TabBar } from 'antd-mobile'\nimport PropTypes from 'prop-types'\nimport { withRouter } from 'react-router-dom' //希望在非路由组件中使用路由库的API\n\nconst Item = TabBar.Item\n\nclass Navfooter extends Component {\n  static propTypes = {\n    navList: PropTypes.array.isRequired,\n    unReadCount: PropTypes.number.isRequired\n  }\n  render () {\n    let { navList ,unReadCount} = this.props\n    // 过滤hide为true的nav\n    navList=navList.filter(nav=>!nav.hide)\n    const path = this.props.location.pathname\n    return (\n      <TabBar>\n        {navList.map(nav => (\n          <Item\n            key={nav.path}\n            badge={nav.path==='/message'?unReadCount:0}\n            title={nav.text}\n            icon={\n              <img\n                src={require('./images/' + nav.icon + '.png').default}\n                style={{ width: '22px', height: '22px' }}\n              />\n            }\n            selectedIcon={\n              <img\n                src={require('./images/' + nav.icon + '-selected.png').default}\n                style={{ width: '22px', height: '22px' }}\n              />\n            }\n            selected={path === nav.path}\n            onPress={() => this.props.history.replace(nav.path)}\n          ></Item>\n        ))}\n      </TabBar>\n    )\n  }\n}\n\nexport default withRouter(Navfooter) //向外暴露withRouter（）包装产生的组件\n// 暴露之后，内部会向组件中传入一些路由组件的属性值\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\redux\\action-types.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\api\\index.js",[],"D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\user-list\\user-list.jsx",["236","237"],"// 显示指定用户列表的UI组件\nimport React, { Component } from 'react'\nimport PropType from 'prop-types'\nimport { Card, WingBlank, WhiteSpace } from 'antd-mobile'\nimport QueueAnim from 'rc-queue-anim'\nimport { withRouter } from 'react-router-dom'\nconst Header = Card.Header\nconst Body = Card.Body\nclass UserList extends React.Component {\n  static propType = {\n    userList: PropType.array.isRequired\n  }\n  render () {\n    const { userlist } = this.props\n    const user = {\n      header: '头像1',\n      username: 'dapiaol',\n      waimao: '美丽',\n      money: '12',\n      xueii: '本科',\n      detail: 'dddd'\n    }\n\n    return (\n      <WingBlank style={{ marginBottom: 55, marginTop: 50 }}>\n        {/* alpha left right top bottom scale scaleBig scaleX scaleY */}\n        <QueueAnim type={'right'} delay={300}>\n          {userlist.map(user => {\n            return (\n              <div key={user._id}>\n                <WhiteSpace />\n                <Card\n                  onClick={() => this.props.history.push(`/chat/${user._id}`)}\n                >\n                  <Header\n                    thumb={\n                      require(`../../assets/images/${user.header}.png`).default\n                    }\n                    extra={user.username}\n                  />\n                  <Body>\n                    {user.waimao ? <div>美貌: {user.waimao}</div> : null}\n                    {user.age ? <div>年龄: {user.age}</div> : null}\n                    <div>学历: {user.xueii}</div>\n                    <div>月薪: {user.money}</div>\n                    <div>宣言: {user.detail}</div>\n                  </Body>\n                </Card>\n              </div>\n            )\n          })}\n        </QueueAnim>\n      </WingBlank>\n    )\n  }\n}\n\nexport default withRouter(UserList)\n","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\components\\header-selector\\header-selector.jsx",["238"],"// 信息页面的头部\n\nimport React,{ Component } from \"react\";\nimport {List ,Grid} from 'antd-mobile'\nimport PropTypes from 'prop-types'\n\nexport default class HeaderSelector extends Component {\n  static propTypes={\n    setHandleHeader:PropTypes.func.isRequired\n  }\n\n  state={\n    icon:null\n  }\n  constructor(prop) {\n    super(prop)\n    this.headerList=[]\n    for (let i = 0; i < 20; i++) {\n      this.headerList.push({\n        text:'头像'+(i+1),\n        icon:require(`../../assets/images/头像${i+1}.png`).default\n      })\n      \n    }\n  }\n  render () {\n    // const listHeader='请选择头像'\n    // 头部头像\n    const {icon}=this.state\n    const listHeader=icon? (<div>已选择的头像：<img src={icon} /></div>):'请选择头像'\n    return (\n      <List renderHeader={()=>listHeader}>\n        <Grid data={this.headerList} columnNum={5} onClick={this.headerClick}></Grid>\n      </List>\n    )\n  }\n  headerClick=({text,icon})=>{\n    this.setState({\n      icon\n    })\n    this.props.setHandleHeader(text)\n\n  }\n}","D:\\聊天室\\makeFriends-master\\makeFriends-master\\src\\api\\ajax.js",["239"],"import axios from 'axios'\n\nexport default function ajax (url, data = {}, types = 'GET') {\n  if (types === 'GET') {\n    // 原始数据是：{username：Tom，password：123}\n    // 格式化的数据：username=Tom&password=123\n    if (Object.keys(data).length === 0) {\n      return axios.get(url)\n    } else {\n      let paramStr = ''\n      Object.key(data).forEach(key => {\n        paramStr += key + '=' + data[key] + '&'\n      })\n      if (paramStr != '') {\n        paramStr = paramStr.substring(0, paramStr.lastIndexOf('&'))\n        url = url + '?' + paramStr\n      }\n      return axios.get(url)\n    }\n  } else {\n    return axios.post(url, data)\n  }\n}\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\index.js",[],["240","241"],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\store.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\test\\socketIO_test.js",["242"],"//连接服务器,得到代表连接的socket对象\r\nimport io from 'socket.io-client'\r\n\r\n\r\n// //向服务器发送消息\r\n// socket.emit('sendMsg', { name: 'zhenni', date: Date.now() })\r\n// console.log('浏览器端向服务器发送消息:', { name: 'zhenni', date: Date.now() })\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\register\\register.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\login\\login.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\main\\main.jsx",["243","244"],"// 注册主界面m组件\r\nimport React, { Component } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { NavBar, Icon } from 'antd-mobile'\r\nimport ShuaiGeInfo from '../shuaige_info/shuaige_info'\r\nimport MeiNvInfo from '../meinv_info/meinv_info'\r\nimport MeiNv from '../meinv/meinv'\r\nimport ShuaiGe from '../shuaige/shuaige'\r\nimport Message from '../message/message'\r\nimport Personal from '../personal/personal'\r\nimport NotFound from '../../components/not-found/not-found'\r\nimport NavFooter from '../../components/nav-footer/nav-footer'\r\nimport Chat from '../chat/chat'\r\nimport Search from '../search/search'\r\nimport Cookies from 'js-cookie' // 可以操作前端cookie的对象set()/get()/remove()\r\nimport { setPath } from '../../utils/index'\r\nimport { getUser } from '../../redux/actions'\r\n\r\nclass Main extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {}\r\n  }\r\n  // 给组件对象添加属性\r\n  navList = [\r\n    //包含所有导航组件的相关属性信息\r\n    {\r\n      path: '/shuaige', // 路由路径\r\n      component: ShuaiGe,\r\n      title: '美女列表',\r\n      icon: 'meinv',\r\n      text: '美女'\r\n    },\r\n    {\r\n      path: '/meinv', // 路由路径\r\n      component: MeiNv,\r\n      title: '帅哥列表',\r\n      icon: 'shuaige',\r\n      text: '帅哥'\r\n    },\r\n    {\r\n      path: '/message', // 路由路径\r\n      component: Message,\r\n      title: '消息列表',\r\n      icon: 'message',\r\n      text: '消息'\r\n    },\r\n    {\r\n      path: '/personal', // 路由路径\r\n      component: Personal,\r\n      title: '用户中心',\r\n      icon: 'personal',\r\n      text: '个人'\r\n    }\r\n  ]\r\n  // 生命周期函数\r\n  componentDidMount () {\r\n    // 曾经登录过（cookie中有userId），但是现在还没登录（reducer中有userId的数据），如果cookie中有userId，发送请求获取对应的user\r\n    const userId = Cookies.get('userId')\r\n\r\n    if (userId && !this.props.user._id) {\r\n      // 发送异步请求，获取user\r\n      this.props.getUser()\r\n    }\r\n  }\r\n  render () {\r\n    /**\r\n     * 实现自动登录的条件\r\n     * 1、componentDidMount：曾经登录过（cookie中有userId），但是现在还没登录（reducer中有userId的数据），如果cookie中有userId，发送请求获取对应的user\r\n     * 2、render ：如果cookie中没有userid，跳转到登录页面\r\n     * 2.1判断redux管理的user中是否有_id,如果没有，暂时不做处理\r\n     * 2.2如果有_id 说明当前已经登录，显示对应的界面\r\n     * 3、如果已经登录，如果请求的时根目录\r\n     * 根据user的type和header来计算出一个重定向的路由路径，并自动重定向\r\n     *\r\n     */\r\n    //  路由跳转情况1：没有userId，直接跳转到login页面\r\n    const userId = Cookies.get('userId')\r\n    const { unReadCount } = this.props\r\n    if (!userId) {\r\n      return <Redirect to={'/login'} />\r\n    }\r\n    // 路由跳转情况2：如果没有_id通过生命周期函数去请求用户信息获取用户信息实现自登陆\r\n    // 如果有_id进根据url的地址进行跳转\r\n    if (!this.props.user._id) {\r\n      return null\r\n    } else {\r\n      let path = this.props.location.pathname\r\n      if (path == '/')\r\n        path = setPath(this.props.user.type, this.props.user.header)\r\n\r\n      const { navList } = this\r\n      const routePath = this.props.location.pathname\r\n      const currentNav = navList.find(nav => nav.path === routePath) //得到当前的nav，可能没有\r\n      // 处理底部导航的显示和隐藏\r\n      if (currentNav) {\r\n        if (this.props.user.type == 'meinv') {\r\n          this.navList[0].hide = true\r\n        } else {\r\n          this.navList[1].hide = true\r\n        }\r\n      }\r\n      return (\r\n        <div>\r\n          {currentNav ? (\r\n            currentNav.path === '/personal' ? (\r\n              <NavBar\r\n                className='sticky-header'\r\n                rightContent={[<Icon key='1' type='ellipsis' />]}\r\n              >\r\n                {currentNav.title}\r\n              </NavBar>\r\n            ) : (\r\n              <NavBar\r\n                className='sticky-header'\r\n                rightContent={[\r\n                  <Icon\r\n                    key='0'\r\n                    type='search'\r\n                    style={{ marginRight: '16px' }}\r\n                    onClick={()=>this.props.history.push(`/search`)}\r\n                  />,\r\n                  <Icon key='1' type='ellipsis' />\r\n                ]}\r\n              >\r\n                {currentNav.title}\r\n              </NavBar>\r\n            )\r\n          ) : null}\r\n\r\n          <Switch>\r\n            {navList.map(nav => (\r\n              <Route\r\n                path={nav.path}\r\n                component={nav.component}\r\n                key={nav.path}\r\n              ></Route>\r\n            ))}\r\n            <Route path='/shuaigeinfo' component={ShuaiGeInfo}></Route>\r\n            <Route path='/meinvinfo' component={MeiNvInfo}></Route>\r\n            <Route path='/search' component={Search}></Route>\r\n            <Route path='/chat/:userId' component={Chat}></Route>\r\n            <Route path='/notfound' component={NotFound}></Route>\r\n            <Redirect to={path} />\r\n          </Switch>\r\n          {currentNav ? (\r\n            <NavFooter navList={navList} unReadCount={unReadCount}></NavFooter>\r\n          ) : null}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({ user: state.user, unReadCount: state.chatMsgList.unReadCount }),\r\n  { getUser }\r\n)(Main)\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\reducers.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\actions.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\utils\\index.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige_info\\shuaige_info.jsx",["245"],"// 帅哥信息完善的路由容器组件\r\nimport React, { Component } from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\r\nimport HeaderSelector from '../../components/header-selector/header-selector'\r\nimport { updateUser } from '../../redux/actions'\r\n\r\nclass ShuaiGeInfo extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      header: '',\r\n      age: '',\r\n      xueii: '',\r\n      money: '',\r\n      detail: ''\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const {header,type}=this.props\r\n    if (header) {\r\n      const path =type=='meinv'?'/meinv':'/shuaige'\r\n      return <Redirect to={path}/>\r\n    }\r\n    return (\r\n      <div>\r\n        <NavBar>帅哥信息完善</NavBar>\r\n        <HeaderSelector setHandleHeader={this.setHandleHeader}></HeaderSelector>\r\n        <InputItem\r\n          placeholder='输入年龄'\r\n          onChange={val => this.handleChange('age', val)}\r\n        >\r\n          年龄 ：\r\n        </InputItem>\r\n        <InputItem\r\n          placeholder='输入学历'\r\n          onChange={val => this.handleChange('xueii', val)}\r\n        >\r\n          学历 ：\r\n        </InputItem>\r\n        <InputItem\r\n          placeholder='输入薪资'\r\n          onChange={val => this.handleChange('money', val)}\r\n        >\r\n          薪资 ：\r\n        </InputItem>\r\n        <TextareaItem\r\n          title='交友宣言 ：'\r\n          rows={3}\r\n          clear\r\n          count={200}\r\n          onChange={val => this.handleChange('detail', val)}\r\n        ></TextareaItem>\r\n        <Button type='primary' onClick={this.save}>\r\n          保存\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n  handleChange = (name, val) => {\r\n    this.setState({\r\n      [name]: val\r\n    })\r\n  }\r\n  // 更新header\r\n  setHandleHeader = header => {\r\n    this.setState({\r\n      header\r\n    })\r\n  }\r\n  save = () => {\r\n    this.props.updateUser(this.state)\r\n  }\r\n}\r\n\r\nexport default connect(state => state.user, { updateUser })(ShuaiGeInfo)\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\shuaige\\shuaige.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\personal\\personal.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv_info\\meinv_info.jsx",["246"],"// 帅哥信息完善的路由容器组件\r\nimport React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\r\nimport HeaderSelector from '../../components/header-selector/header-selector'\r\nimport { updateUser } from '../../redux/actions'\r\n\r\nclass MeiNvInfo extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      header: '',\r\n      waimao: '',\r\n      xueii: '',\r\n      money: '',\r\n      detail: ''\r\n    }\r\n  }\r\n  render () {\r\n    const { header, type } = this.props\r\n    if (header) {\r\n      const path = type == 'meinv' ? '/meinv' : '/shuaige'\r\n      return <Redirect to={path} />\r\n    }\r\n    return (\r\n      <div>\r\n        <NavBar>美女信息完善</NavBar>\r\n        <HeaderSelector setHandleHeader={this.setHandleHeader}></HeaderSelector>\r\n        <InputItem\r\n          placeholder='输入美貌'\r\n          onChange={val => this.handleChange('waimao', val)}\r\n        >\r\n          美貌 ：\r\n        </InputItem>\r\n        <InputItem\r\n          placeholder='输入学历'\r\n          onChange={val => this.handleChange('xueii', val)}\r\n        >\r\n          学历 ：\r\n        </InputItem>\r\n        <InputItem\r\n          placeholder='输入薪资'\r\n          onChange={val => this.handleChange('money', val)}\r\n        >\r\n          薪资 ：\r\n        </InputItem>\r\n        <TextareaItem\r\n          title='交友宣言 ：'\r\n          rows={3}\r\n          clear\r\n          count={200}\r\n          onChange={val => this.handleChange('detail', val)}\r\n        ></TextareaItem>\r\n        <Button type='primary' onClick={this.save}>\r\n          保存\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n  handleChange = (name, val) => {\r\n    this.setState({\r\n      [name]: val\r\n    })\r\n  }\r\n  // 更新header\r\n  setHandleHeader = header => {\r\n    this.setState({\r\n      header\r\n    })\r\n  }\r\n  save = () => {\r\n    this.props.updateUser(this.state)\r\n  }\r\n}\r\n\r\nexport default connect(state => state.user,{updateUser})(MeiNvInfo)\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\message\\message.jsx",["247"],"/**\r\n * 消息主界面路由容器组件\r\n */\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Moment from 'moment'\r\nimport { List, Badge } from 'antd-mobile'\r\nconst Item = List.Item\r\n\r\n// 对chatMsgs根据chat_id进行分组，并得到每个组的lastmsg组成的数组\r\n/**\r\n * 1、找出每个聊天的lastMsg，并用一个对象勇气来保存{chat_id:lastMsg}\r\n * 2、得到所有lastMsg的数组\r\n * 3、对数组进行排序（按create_time降序)\r\n * @param {*} chatMsgs\r\n */\r\nfunction getLastMsgs (chatMsgs, userId) {\r\n  const lastMsgObjs = {}\r\n  chatMsgs.forEach(msg => {\r\n    // 对msg进行个体统计  (别人发给我的，而且还说我没有读的消息)\r\n    if (msg.to === userId && !msg.read) {\r\n      msg.unReadCount = 1\r\n    } else {\r\n      msg.unReadCount = 0\r\n    }\r\n    const chatId = msg.chat_id\r\n    const lastMsg = lastMsgObjs[chatId]\r\n    if (!lastMsg) {\r\n      //当前msg就是所在组的lastMsg\r\n      lastMsgObjs[chatId] = msg\r\n    } else {\r\n      // 累加UnReadCount=已经统计的+当前msg的\r\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount\r\n      //如果msg比lastMsg晚，就将msg保存为lastMsg\r\n      if (msg.create_time > lastMsg.create_time) {\r\n        lastMsgObjs[chatId] = msg\r\n      }\r\n      // 将UnReadCount保存最新的lastMsg上\r\n      lastMsgObjs[chatId].unReadCount = unReadCount\r\n    }\r\n  })\r\n  // 得到所有的lastMsg组成的数组\r\n  const lastMsgs = Object.values(lastMsgObjs)\r\n  // 对数组进行排序（按照create_time）\r\n  lastMsgs.sort(function (m1, m2) {\r\n    //如果结果小于0，将m1放在前面，如果结果为0，保持不变，如果大于0，m2放在前面\r\n    return m1.create_time - m2.create_time\r\n  })\r\n\r\n  return lastMsgs\r\n}\r\nclass Message extends Component {\r\n  render () {\r\n    const { user } = this.props\r\n    const { users, chatMsgs } = this.props.chat\r\n\r\n    // 对chatMsgs根据chat_id进行分组\r\n    const lastLists = getLastMsgs(chatMsgs, user._id) //不加this的函数调用，函数需要定义到class外面，如果加this调用函数，函数需要定义到class里面\r\n    return (\r\n      <List\r\n        style={{ marginTop: 50, marginBottom: 50 }}\r\n        className='messageStyle'\r\n      >\r\n        {lastLists.map(msg => {\r\n          // 得到目标用户的id\r\n          const fromTime = Moment(msg.create_time).format('HH:mm')\r\n          const targetUserId = msg.to === user._id ? msg.from : msg.to\r\n          // 得到目标用户的信息\r\n          const targetUser = users[targetUserId]\r\n          if (msg.unReadCount > 99) {\r\n            msg.unReadCount = 99 + '+'\r\n          }\r\n          return (\r\n            <Item\r\n              extra={fromTime}\r\n              arrow='horizontal'\r\n              key={msg._id}\r\n              onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\r\n            >\r\n              <Badge text={msg.unReadCount}>\r\n                <img\r\n                  src={\r\n                    targetUser.header\r\n                      ? require(`../../assets/images/${targetUser.header}.png`)\r\n                          .default\r\n                      : null\r\n                  }\r\n                />\r\n              </Badge>\r\n              <span style={{ marginLeft: 20 ,width:'80%'}} className='userNameAndContent'>\r\n                <div>{targetUser.username}</div>\r\n                <div>{msg.content}</div>\r\n              </span>\r\n            </Item>\r\n          )\r\n        })}\r\n      </List>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({ user: state.user, chat: state.chatMsgList }),\r\n  {}\r\n)(Message)\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\meinv\\meinv.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\chat\\chat.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\containers\\search\\search.jsx",["248"],"import React, { Component } from 'react'\r\nimport {\r\n  NavBar,\r\n  Button,\r\n  SearchBar,\r\n  WhiteSpace,\r\n  List,\r\n  Checkbox,\r\n  Icon\r\n} from 'antd-mobile'\r\nimport {connect} from 'react-redux'\r\nimport {getXueLiPeo} from '../../redux/actions'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem\r\nclass Search extends React.Component {\r\n  state = {\r\n    xueliArrays: []\r\n  }\r\n  onChange = val => {\r\n    this.setState(\r\n      {\r\n        xueliArrays: [...this.state.xueliArrays, val]\r\n      },\r\n      function () {\r\n        // console.log(this.state.xueliArrays)\r\n      }\r\n    )\r\n  }\r\n  render () {\r\n    const data = [\r\n      { xueii: '初中' },\r\n      { xueii: '高中' },\r\n      { xueii: '专科' },\r\n      { xueii: '本科' },\r\n      { xueii: '大学士' },\r\n      { xueii: '太子伴读' },\r\n      { xueii: '硕士' },\r\n      { xueii: '博士' },\r\n      { xueii: '博士后' }\r\n    ]\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          icon={<Icon type='left'></Icon>}\r\n          className='sticky-header'\r\n          onLeftClick={() => this.props.history.goBack()}\r\n        >\r\n          搜索\r\n        </NavBar>\r\n\r\n        <SearchBar\r\n          style={{ marginTop: 50 }}\r\n          placeholder='搜索'\r\n          ref={ref => (this.autoFocusInst = ref)}\r\n        />\r\n        <WhiteSpace />\r\n\r\n        <h3>按条件搜索</h3>\r\n        <WhiteSpace />\r\n        <List renderHeader={() => '学历'}>\r\n          {data.map(i => (\r\n            <CheckboxItem key={i.xueii} onChange={() => this.onChange(i)}>\r\n              {i.xueii}\r\n            </CheckboxItem>\r\n          ))}\r\n        </List>\r\n        <WhiteSpace />\r\n        <Button onClick={()=>this.searthRes()}>搜索</Button>\r\n        <WhiteSpace />\r\n      </div>\r\n    )\r\n  }\r\n  searthRes=()=>{\r\n    let {type}=this.props.user\r\n    type=type==='shuaige'?'meinv':'shuaige'\r\n    this.props.getXueLiPeo({type,xueliArrays:this.state.xueliArrays})\r\n  }\r\n}\r\n\r\nexport default connect(state=>({user:state.user,userList:state.userlist}),{getXueLiPeo})(Search)","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\not-found\\not-found.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\logo\\logo.jsx",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\nav-footer\\nav-footer.jsx",["249","250"],"/**\r\n * 底部导航列表\r\n */\r\nimport React, { Component } from 'react'\r\nimport { TabBar } from 'antd-mobile'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router-dom' //希望在非路由组件中使用路由库的API\r\n\r\nconst Item = TabBar.Item\r\n\r\nclass Navfooter extends Component {\r\n  static propTypes = {\r\n    navList: PropTypes.array.isRequired,\r\n    unReadCount: PropTypes.number.isRequired\r\n  }\r\n  render () {\r\n    let { navList ,unReadCount} = this.props\r\n    // 过滤hide为true的nav\r\n    navList=navList.filter(nav=>!nav.hide)\r\n    const path = this.props.location.pathname\r\n    return (\r\n      <TabBar>\r\n        {navList.map(nav => (\r\n          <Item\r\n            key={nav.path}\r\n            badge={nav.path==='/message'?unReadCount:0}\r\n            title={nav.text}\r\n            icon={\r\n              <img\r\n                src={require('./images/' + nav.icon + '.png').default}\r\n                style={{ width: '22px', height: '22px' }}\r\n              />\r\n            }\r\n            selectedIcon={\r\n              <img\r\n                src={require('./images/' + nav.icon + '-selected.png').default}\r\n                style={{ width: '22px', height: '22px' }}\r\n              />\r\n            }\r\n            selected={path === nav.path}\r\n            onPress={() => this.props.history.replace(nav.path)}\r\n          ></Item>\r\n        ))}\r\n      </TabBar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Navfooter) //向外暴露withRouter（）包装产生的组件\r\n// 暴露之后，内部会向组件中传入一些路由组件的属性值\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\redux\\action-types.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\api\\index.js",[],"D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\header-selector\\header-selector.jsx",["251"],"// 信息页面的头部\r\n\r\nimport React,{ Component } from \"react\";\r\nimport {List ,Grid} from 'antd-mobile'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class HeaderSelector extends Component {\r\n  static propTypes={\r\n    setHandleHeader:PropTypes.func.isRequired\r\n  }\r\n\r\n  state={\r\n    icon:null\r\n  }\r\n  constructor(prop) {\r\n    super(prop)\r\n    this.headerList=[]\r\n    for (let i = 0; i < 20; i++) {\r\n      this.headerList.push({\r\n        text:'头像'+(i+1),\r\n        icon:require(`../../assets/images/头像${i+1}.png`).default\r\n      })\r\n      \r\n    }\r\n  }\r\n  render () {\r\n    // const listHeader='请选择头像'\r\n    // 头部头像\r\n    const {icon}=this.state\r\n    const listHeader=icon? (<div>已选择的头像：<img src={icon} /></div>):'请选择头像'\r\n    return (\r\n      <List renderHeader={()=>listHeader}>\r\n        <Grid data={this.headerList} columnNum={5} onClick={this.headerClick}></Grid>\r\n      </List>\r\n    )\r\n  }\r\n  headerClick=({text,icon})=>{\r\n    this.setState({\r\n      icon\r\n    })\r\n    this.props.setHandleHeader(text)\r\n\r\n  }\r\n}","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\components\\user-list\\user-list.jsx",["252","253"],"// 显示指定用户列表的UI组件\r\nimport React, { Component } from 'react'\r\nimport PropType from 'prop-types'\r\nimport { Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport QueueAnim from 'rc-queue-anim'\r\nimport { withRouter } from 'react-router-dom'\r\nconst Header = Card.Header\r\nconst Body = Card.Body\r\nclass UserList extends React.Component {\r\n  static propType = {\r\n    userList: PropType.array.isRequired\r\n  }\r\n  render () {\r\n    const { userlist } = this.props\r\n    const user = {\r\n      header: '头像1',\r\n      username: 'dapiaol',\r\n      waimao: '美丽',\r\n      money: '12',\r\n      xueii: '本科',\r\n      detail: 'dddd'\r\n    }\r\n\r\n    return (\r\n      <WingBlank style={{ marginBottom: 55, marginTop: 50 }}>\r\n        {/* alpha left right top bottom scale scaleBig scaleX scaleY */}\r\n        <QueueAnim type={'right'} delay={300}>\r\n          {userlist.map(user => {\r\n            return (\r\n              <div key={user._id}>\r\n                <WhiteSpace />\r\n                <Card\r\n                  onClick={() => this.props.history.push(`/chat/${user._id}`)}\r\n                >\r\n                  <Header\r\n                    thumb={\r\n                      require(`../../assets/images/${user.header}.png`).default\r\n                    }\r\n                    extra={user.username}\r\n                  />\r\n                  <Body>\r\n                    {user.waimao ? <div>美貌: {user.waimao}</div> : null}\r\n                    {user.age ? <div>年龄: {user.age}</div> : null}\r\n                    <div>学历: {user.xueii}</div>\r\n                    <div>月薪: {user.money}</div>\r\n                    <div>宣言: {user.detail}</div>\r\n                  </Body>\r\n                </Card>\r\n              </div>\r\n            )\r\n          })}\r\n        </QueueAnim>\r\n      </WingBlank>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(UserList)\r\n","D:\\111\\chat-room\\makeFriends-master\\makeFriends-master\\src\\api\\ajax.js",["254"],"import axios from 'axios'\r\n\r\nexport default function ajax (url, data = {}, types = 'GET') {\r\n  if (types === 'GET') {\r\n    // 原始数据是：{username：Tom，password：123}\r\n    // 格式化的数据：username=Tom&password=123\r\n    if (Object.keys(data).length === 0) {\r\n      return axios.get(url)\r\n    } else {\r\n      let paramStr = ''\r\n      Object.key(data).forEach(key => {\r\n        paramStr += key + '=' + data[key] + '&'\r\n      })\r\n      if (paramStr != '') {\r\n        paramStr = paramStr.substring(0, paramStr.lastIndexOf('&'))\r\n        url = url + '?' + paramStr\r\n      }\r\n      return axios.get(url)\r\n    }\r\n  } else {\r\n    return axios.post(url, data)\r\n  }\r\n}\r\n",{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":2,"column":8,"nodeType":"261","messageId":"262","endLine":2,"endColumn":10},{"ruleId":"263","severity":1,"message":"264","line":90,"column":16,"nodeType":"265","messageId":"266","endLine":90,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":98,"column":34,"nodeType":"265","messageId":"266","endLine":98,"endColumn":36},{"ruleId":"263","severity":1,"message":"264","line":24,"column":23,"nodeType":"265","messageId":"266","endLine":24,"endColumn":25},{"ruleId":"263","severity":1,"message":"264","line":23,"column":25,"nodeType":"265","messageId":"266","endLine":23,"endColumn":27},{"ruleId":"267","severity":1,"message":"268","line":81,"column":17,"nodeType":"269","endLine":88,"endColumn":19},{"ruleId":"259","severity":1,"message":"270","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":29,"column":15,"nodeType":"269","endLine":32,"endColumn":17},{"ruleId":"267","severity":1,"message":"268","line":35,"column":15,"nodeType":"269","endLine":38,"endColumn":17},{"ruleId":"259","severity":1,"message":"270","line":2,"column":17,"nodeType":"261","messageId":"262","endLine":2,"endColumn":26},{"ruleId":"259","severity":1,"message":"271","line":15,"column":11,"nodeType":"261","messageId":"262","endLine":15,"endColumn":15},{"ruleId":"267","severity":1,"message":"268","line":30,"column":41,"nodeType":"269","endLine":30,"endColumn":59},{"ruleId":"263","severity":1,"message":"272","line":14,"column":20,"nodeType":"265","messageId":"266","endLine":14,"endColumn":22},{"ruleId":"255","replacedBy":"273"},{"ruleId":"257","replacedBy":"274"},{"ruleId":"259","severity":1,"message":"260","line":2,"column":8,"nodeType":"261","messageId":"262","endLine":2,"endColumn":10},{"ruleId":"263","severity":1,"message":"264","line":90,"column":16,"nodeType":"265","messageId":"266","endLine":90,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":98,"column":34,"nodeType":"265","messageId":"266","endLine":98,"endColumn":36},{"ruleId":"263","severity":1,"message":"264","line":24,"column":23,"nodeType":"265","messageId":"266","endLine":24,"endColumn":25},{"ruleId":"263","severity":1,"message":"264","line":23,"column":25,"nodeType":"265","messageId":"266","endLine":23,"endColumn":27},{"ruleId":"267","severity":1,"message":"268","line":81,"column":17,"nodeType":"269","endLine":88,"endColumn":19},{"ruleId":"259","severity":1,"message":"270","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":29,"column":15,"nodeType":"269","endLine":32,"endColumn":17},{"ruleId":"267","severity":1,"message":"268","line":35,"column":15,"nodeType":"269","endLine":38,"endColumn":17},{"ruleId":"267","severity":1,"message":"268","line":30,"column":41,"nodeType":"269","endLine":30,"endColumn":59},{"ruleId":"259","severity":1,"message":"270","line":2,"column":17,"nodeType":"261","messageId":"262","endLine":2,"endColumn":26},{"ruleId":"259","severity":1,"message":"271","line":15,"column":11,"nodeType":"261","messageId":"262","endLine":15,"endColumn":15},{"ruleId":"263","severity":1,"message":"272","line":14,"column":20,"nodeType":"265","messageId":"266","endLine":14,"endColumn":22},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'io' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'user' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["275"],["276"],"no-global-assign","no-unsafe-negation"]